// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: private_join_and_compute/private_intersection_sum.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_private_5fjoin_5fand_5fcompute_2fprivate_5fintersection_5fsum_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_private_5fjoin_5fand_5fcompute_2fprivate_5fintersection_5fsum_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "private_join_and_compute/match.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_private_5fjoin_5fand_5fcompute_2fprivate_5fintersection_5fsum_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_private_5fjoin_5fand_5fcompute_2fprivate_5fintersection_5fsum_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_private_5fjoin_5fand_5fcompute_2fprivate_5fintersection_5fsum_2eproto;
namespace private_join_and_compute {
class PrivateIntersectionSumClientMessage;
class PrivateIntersectionSumClientMessageDefaultTypeInternal;
extern PrivateIntersectionSumClientMessageDefaultTypeInternal _PrivateIntersectionSumClientMessage_default_instance_;
class PrivateIntersectionSumClientMessage_ClientRoundOne;
class PrivateIntersectionSumClientMessage_ClientRoundOneDefaultTypeInternal;
extern PrivateIntersectionSumClientMessage_ClientRoundOneDefaultTypeInternal _PrivateIntersectionSumClientMessage_ClientRoundOne_default_instance_;
class PrivateIntersectionSumClientMessage_StartProtocolRequest;
class PrivateIntersectionSumClientMessage_StartProtocolRequestDefaultTypeInternal;
extern PrivateIntersectionSumClientMessage_StartProtocolRequestDefaultTypeInternal _PrivateIntersectionSumClientMessage_StartProtocolRequest_default_instance_;
class PrivateIntersectionSumServerMessage;
class PrivateIntersectionSumServerMessageDefaultTypeInternal;
extern PrivateIntersectionSumServerMessageDefaultTypeInternal _PrivateIntersectionSumServerMessage_default_instance_;
class PrivateIntersectionSumServerMessage_ServerRoundOne;
class PrivateIntersectionSumServerMessage_ServerRoundOneDefaultTypeInternal;
extern PrivateIntersectionSumServerMessage_ServerRoundOneDefaultTypeInternal _PrivateIntersectionSumServerMessage_ServerRoundOne_default_instance_;
class PrivateIntersectionSumServerMessage_ServerRoundTwo;
class PrivateIntersectionSumServerMessage_ServerRoundTwoDefaultTypeInternal;
extern PrivateIntersectionSumServerMessage_ServerRoundTwoDefaultTypeInternal _PrivateIntersectionSumServerMessage_ServerRoundTwo_default_instance_;
}  // namespace private_join_and_compute
PROTOBUF_NAMESPACE_OPEN
template<> ::private_join_and_compute::PrivateIntersectionSumClientMessage* Arena::CreateMaybeMessage<::private_join_and_compute::PrivateIntersectionSumClientMessage>(Arena*);
template<> ::private_join_and_compute::PrivateIntersectionSumClientMessage_ClientRoundOne* Arena::CreateMaybeMessage<::private_join_and_compute::PrivateIntersectionSumClientMessage_ClientRoundOne>(Arena*);
template<> ::private_join_and_compute::PrivateIntersectionSumClientMessage_StartProtocolRequest* Arena::CreateMaybeMessage<::private_join_and_compute::PrivateIntersectionSumClientMessage_StartProtocolRequest>(Arena*);
template<> ::private_join_and_compute::PrivateIntersectionSumServerMessage* Arena::CreateMaybeMessage<::private_join_and_compute::PrivateIntersectionSumServerMessage>(Arena*);
template<> ::private_join_and_compute::PrivateIntersectionSumServerMessage_ServerRoundOne* Arena::CreateMaybeMessage<::private_join_and_compute::PrivateIntersectionSumServerMessage_ServerRoundOne>(Arena*);
template<> ::private_join_and_compute::PrivateIntersectionSumServerMessage_ServerRoundTwo* Arena::CreateMaybeMessage<::private_join_and_compute::PrivateIntersectionSumServerMessage_ServerRoundTwo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace private_join_and_compute {

// ===================================================================

class PrivateIntersectionSumClientMessage_StartProtocolRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:private_join_and_compute.PrivateIntersectionSumClientMessage.StartProtocolRequest) */ {
 public:
  inline PrivateIntersectionSumClientMessage_StartProtocolRequest() : PrivateIntersectionSumClientMessage_StartProtocolRequest(nullptr) {};
  virtual ~PrivateIntersectionSumClientMessage_StartProtocolRequest();

  PrivateIntersectionSumClientMessage_StartProtocolRequest(const PrivateIntersectionSumClientMessage_StartProtocolRequest& from);
  PrivateIntersectionSumClientMessage_StartProtocolRequest(PrivateIntersectionSumClientMessage_StartProtocolRequest&& from) noexcept
    : PrivateIntersectionSumClientMessage_StartProtocolRequest() {
    *this = ::std::move(from);
  }

  inline PrivateIntersectionSumClientMessage_StartProtocolRequest& operator=(const PrivateIntersectionSumClientMessage_StartProtocolRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrivateIntersectionSumClientMessage_StartProtocolRequest& operator=(PrivateIntersectionSumClientMessage_StartProtocolRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PrivateIntersectionSumClientMessage_StartProtocolRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PrivateIntersectionSumClientMessage_StartProtocolRequest* internal_default_instance() {
    return reinterpret_cast<const PrivateIntersectionSumClientMessage_StartProtocolRequest*>(
               &_PrivateIntersectionSumClientMessage_StartProtocolRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PrivateIntersectionSumClientMessage_StartProtocolRequest& a, PrivateIntersectionSumClientMessage_StartProtocolRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PrivateIntersectionSumClientMessage_StartProtocolRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PrivateIntersectionSumClientMessage_StartProtocolRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PrivateIntersectionSumClientMessage_StartProtocolRequest* New() const final {
    return CreateMaybeMessage<PrivateIntersectionSumClientMessage_StartProtocolRequest>(nullptr);
  }

  PrivateIntersectionSumClientMessage_StartProtocolRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PrivateIntersectionSumClientMessage_StartProtocolRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PrivateIntersectionSumClientMessage_StartProtocolRequest& from);
  void MergeFrom(const PrivateIntersectionSumClientMessage_StartProtocolRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrivateIntersectionSumClientMessage_StartProtocolRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "private_join_and_compute.PrivateIntersectionSumClientMessage.StartProtocolRequest";
  }
  protected:
  explicit PrivateIntersectionSumClientMessage_StartProtocolRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_private_5fjoin_5fand_5fcompute_2fprivate_5fintersection_5fsum_2eproto);
    return ::descriptor_table_private_5fjoin_5fand_5fcompute_2fprivate_5fintersection_5fsum_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:private_join_and_compute.PrivateIntersectionSumClientMessage.StartProtocolRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_private_5fjoin_5fand_5fcompute_2fprivate_5fintersection_5fsum_2eproto;
};
// -------------------------------------------------------------------

class PrivateIntersectionSumClientMessage_ClientRoundOne PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:private_join_and_compute.PrivateIntersectionSumClientMessage.ClientRoundOne) */ {
 public:
  inline PrivateIntersectionSumClientMessage_ClientRoundOne() : PrivateIntersectionSumClientMessage_ClientRoundOne(nullptr) {};
  virtual ~PrivateIntersectionSumClientMessage_ClientRoundOne();

  PrivateIntersectionSumClientMessage_ClientRoundOne(const PrivateIntersectionSumClientMessage_ClientRoundOne& from);
  PrivateIntersectionSumClientMessage_ClientRoundOne(PrivateIntersectionSumClientMessage_ClientRoundOne&& from) noexcept
    : PrivateIntersectionSumClientMessage_ClientRoundOne() {
    *this = ::std::move(from);
  }

  inline PrivateIntersectionSumClientMessage_ClientRoundOne& operator=(const PrivateIntersectionSumClientMessage_ClientRoundOne& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrivateIntersectionSumClientMessage_ClientRoundOne& operator=(PrivateIntersectionSumClientMessage_ClientRoundOne&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PrivateIntersectionSumClientMessage_ClientRoundOne& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PrivateIntersectionSumClientMessage_ClientRoundOne* internal_default_instance() {
    return reinterpret_cast<const PrivateIntersectionSumClientMessage_ClientRoundOne*>(
               &_PrivateIntersectionSumClientMessage_ClientRoundOne_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PrivateIntersectionSumClientMessage_ClientRoundOne& a, PrivateIntersectionSumClientMessage_ClientRoundOne& b) {
    a.Swap(&b);
  }
  inline void Swap(PrivateIntersectionSumClientMessage_ClientRoundOne* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PrivateIntersectionSumClientMessage_ClientRoundOne* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PrivateIntersectionSumClientMessage_ClientRoundOne* New() const final {
    return CreateMaybeMessage<PrivateIntersectionSumClientMessage_ClientRoundOne>(nullptr);
  }

  PrivateIntersectionSumClientMessage_ClientRoundOne* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PrivateIntersectionSumClientMessage_ClientRoundOne>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PrivateIntersectionSumClientMessage_ClientRoundOne& from);
  void MergeFrom(const PrivateIntersectionSumClientMessage_ClientRoundOne& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrivateIntersectionSumClientMessage_ClientRoundOne* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "private_join_and_compute.PrivateIntersectionSumClientMessage.ClientRoundOne";
  }
  protected:
  explicit PrivateIntersectionSumClientMessage_ClientRoundOne(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_private_5fjoin_5fand_5fcompute_2fprivate_5fintersection_5fsum_2eproto);
    return ::descriptor_table_private_5fjoin_5fand_5fcompute_2fprivate_5fintersection_5fsum_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPublicKeyFieldNumber = 1,
    kEncryptedSetFieldNumber = 2,
    kReencryptedSetFieldNumber = 3,
  };
  // optional bytes public_key = 1;
  bool has_public_key() const;
  private:
  bool _internal_has_public_key() const;
  public:
  void clear_public_key();
  const std::string& public_key() const;
  void set_public_key(const std::string& value);
  void set_public_key(std::string&& value);
  void set_public_key(const char* value);
  void set_public_key(const void* value, size_t size);
  std::string* mutable_public_key();
  std::string* release_public_key();
  void set_allocated_public_key(std::string* public_key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_public_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_public_key(
      std::string* public_key);
  private:
  const std::string& _internal_public_key() const;
  void _internal_set_public_key(const std::string& value);
  std::string* _internal_mutable_public_key();
  public:

  // optional .private_join_and_compute.EncryptedSet encrypted_set = 2;
  bool has_encrypted_set() const;
  private:
  bool _internal_has_encrypted_set() const;
  public:
  void clear_encrypted_set();
  const ::private_join_and_compute::EncryptedSet& encrypted_set() const;
  ::private_join_and_compute::EncryptedSet* release_encrypted_set();
  ::private_join_and_compute::EncryptedSet* mutable_encrypted_set();
  void set_allocated_encrypted_set(::private_join_and_compute::EncryptedSet* encrypted_set);
  private:
  const ::private_join_and_compute::EncryptedSet& _internal_encrypted_set() const;
  ::private_join_and_compute::EncryptedSet* _internal_mutable_encrypted_set();
  public:
  void unsafe_arena_set_allocated_encrypted_set(
      ::private_join_and_compute::EncryptedSet* encrypted_set);
  ::private_join_and_compute::EncryptedSet* unsafe_arena_release_encrypted_set();

  // optional .private_join_and_compute.EncryptedSet reencrypted_set = 3;
  bool has_reencrypted_set() const;
  private:
  bool _internal_has_reencrypted_set() const;
  public:
  void clear_reencrypted_set();
  const ::private_join_and_compute::EncryptedSet& reencrypted_set() const;
  ::private_join_and_compute::EncryptedSet* release_reencrypted_set();
  ::private_join_and_compute::EncryptedSet* mutable_reencrypted_set();
  void set_allocated_reencrypted_set(::private_join_and_compute::EncryptedSet* reencrypted_set);
  private:
  const ::private_join_and_compute::EncryptedSet& _internal_reencrypted_set() const;
  ::private_join_and_compute::EncryptedSet* _internal_mutable_reencrypted_set();
  public:
  void unsafe_arena_set_allocated_reencrypted_set(
      ::private_join_and_compute::EncryptedSet* reencrypted_set);
  ::private_join_and_compute::EncryptedSet* unsafe_arena_release_reencrypted_set();

  // @@protoc_insertion_point(class_scope:private_join_and_compute.PrivateIntersectionSumClientMessage.ClientRoundOne)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr public_key_;
  ::private_join_and_compute::EncryptedSet* encrypted_set_;
  ::private_join_and_compute::EncryptedSet* reencrypted_set_;
  friend struct ::TableStruct_private_5fjoin_5fand_5fcompute_2fprivate_5fintersection_5fsum_2eproto;
};
// -------------------------------------------------------------------

class PrivateIntersectionSumClientMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:private_join_and_compute.PrivateIntersectionSumClientMessage) */ {
 public:
  inline PrivateIntersectionSumClientMessage() : PrivateIntersectionSumClientMessage(nullptr) {};
  virtual ~PrivateIntersectionSumClientMessage();

  PrivateIntersectionSumClientMessage(const PrivateIntersectionSumClientMessage& from);
  PrivateIntersectionSumClientMessage(PrivateIntersectionSumClientMessage&& from) noexcept
    : PrivateIntersectionSumClientMessage() {
    *this = ::std::move(from);
  }

  inline PrivateIntersectionSumClientMessage& operator=(const PrivateIntersectionSumClientMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrivateIntersectionSumClientMessage& operator=(PrivateIntersectionSumClientMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PrivateIntersectionSumClientMessage& default_instance();

  enum MessageContentCase {
    kStartProtocolRequest = 1,
    kClientRoundOne = 2,
    MESSAGE_CONTENT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PrivateIntersectionSumClientMessage* internal_default_instance() {
    return reinterpret_cast<const PrivateIntersectionSumClientMessage*>(
               &_PrivateIntersectionSumClientMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PrivateIntersectionSumClientMessage& a, PrivateIntersectionSumClientMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(PrivateIntersectionSumClientMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PrivateIntersectionSumClientMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PrivateIntersectionSumClientMessage* New() const final {
    return CreateMaybeMessage<PrivateIntersectionSumClientMessage>(nullptr);
  }

  PrivateIntersectionSumClientMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PrivateIntersectionSumClientMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PrivateIntersectionSumClientMessage& from);
  void MergeFrom(const PrivateIntersectionSumClientMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrivateIntersectionSumClientMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "private_join_and_compute.PrivateIntersectionSumClientMessage";
  }
  protected:
  explicit PrivateIntersectionSumClientMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_private_5fjoin_5fand_5fcompute_2fprivate_5fintersection_5fsum_2eproto);
    return ::descriptor_table_private_5fjoin_5fand_5fcompute_2fprivate_5fintersection_5fsum_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef PrivateIntersectionSumClientMessage_StartProtocolRequest StartProtocolRequest;
  typedef PrivateIntersectionSumClientMessage_ClientRoundOne ClientRoundOne;

  // accessors -------------------------------------------------------

  enum : int {
    kStartProtocolRequestFieldNumber = 1,
    kClientRoundOneFieldNumber = 2,
  };
  // .private_join_and_compute.PrivateIntersectionSumClientMessage.StartProtocolRequest start_protocol_request = 1;
  bool has_start_protocol_request() const;
  private:
  bool _internal_has_start_protocol_request() const;
  public:
  void clear_start_protocol_request();
  const ::private_join_and_compute::PrivateIntersectionSumClientMessage_StartProtocolRequest& start_protocol_request() const;
  ::private_join_and_compute::PrivateIntersectionSumClientMessage_StartProtocolRequest* release_start_protocol_request();
  ::private_join_and_compute::PrivateIntersectionSumClientMessage_StartProtocolRequest* mutable_start_protocol_request();
  void set_allocated_start_protocol_request(::private_join_and_compute::PrivateIntersectionSumClientMessage_StartProtocolRequest* start_protocol_request);
  private:
  const ::private_join_and_compute::PrivateIntersectionSumClientMessage_StartProtocolRequest& _internal_start_protocol_request() const;
  ::private_join_and_compute::PrivateIntersectionSumClientMessage_StartProtocolRequest* _internal_mutable_start_protocol_request();
  public:
  void unsafe_arena_set_allocated_start_protocol_request(
      ::private_join_and_compute::PrivateIntersectionSumClientMessage_StartProtocolRequest* start_protocol_request);
  ::private_join_and_compute::PrivateIntersectionSumClientMessage_StartProtocolRequest* unsafe_arena_release_start_protocol_request();

  // .private_join_and_compute.PrivateIntersectionSumClientMessage.ClientRoundOne client_round_one = 2;
  bool has_client_round_one() const;
  private:
  bool _internal_has_client_round_one() const;
  public:
  void clear_client_round_one();
  const ::private_join_and_compute::PrivateIntersectionSumClientMessage_ClientRoundOne& client_round_one() const;
  ::private_join_and_compute::PrivateIntersectionSumClientMessage_ClientRoundOne* release_client_round_one();
  ::private_join_and_compute::PrivateIntersectionSumClientMessage_ClientRoundOne* mutable_client_round_one();
  void set_allocated_client_round_one(::private_join_and_compute::PrivateIntersectionSumClientMessage_ClientRoundOne* client_round_one);
  private:
  const ::private_join_and_compute::PrivateIntersectionSumClientMessage_ClientRoundOne& _internal_client_round_one() const;
  ::private_join_and_compute::PrivateIntersectionSumClientMessage_ClientRoundOne* _internal_mutable_client_round_one();
  public:
  void unsafe_arena_set_allocated_client_round_one(
      ::private_join_and_compute::PrivateIntersectionSumClientMessage_ClientRoundOne* client_round_one);
  ::private_join_and_compute::PrivateIntersectionSumClientMessage_ClientRoundOne* unsafe_arena_release_client_round_one();

  void clear_message_content();
  MessageContentCase message_content_case() const;
  // @@protoc_insertion_point(class_scope:private_join_and_compute.PrivateIntersectionSumClientMessage)
 private:
  class _Internal;
  void set_has_start_protocol_request();
  void set_has_client_round_one();

  inline bool has_message_content() const;
  inline void clear_has_message_content();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union MessageContentUnion {
    MessageContentUnion() {}
    ::private_join_and_compute::PrivateIntersectionSumClientMessage_StartProtocolRequest* start_protocol_request_;
    ::private_join_and_compute::PrivateIntersectionSumClientMessage_ClientRoundOne* client_round_one_;
  } message_content_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_private_5fjoin_5fand_5fcompute_2fprivate_5fintersection_5fsum_2eproto;
};
// -------------------------------------------------------------------

class PrivateIntersectionSumServerMessage_ServerRoundOne PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:private_join_and_compute.PrivateIntersectionSumServerMessage.ServerRoundOne) */ {
 public:
  inline PrivateIntersectionSumServerMessage_ServerRoundOne() : PrivateIntersectionSumServerMessage_ServerRoundOne(nullptr) {};
  virtual ~PrivateIntersectionSumServerMessage_ServerRoundOne();

  PrivateIntersectionSumServerMessage_ServerRoundOne(const PrivateIntersectionSumServerMessage_ServerRoundOne& from);
  PrivateIntersectionSumServerMessage_ServerRoundOne(PrivateIntersectionSumServerMessage_ServerRoundOne&& from) noexcept
    : PrivateIntersectionSumServerMessage_ServerRoundOne() {
    *this = ::std::move(from);
  }

  inline PrivateIntersectionSumServerMessage_ServerRoundOne& operator=(const PrivateIntersectionSumServerMessage_ServerRoundOne& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrivateIntersectionSumServerMessage_ServerRoundOne& operator=(PrivateIntersectionSumServerMessage_ServerRoundOne&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PrivateIntersectionSumServerMessage_ServerRoundOne& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PrivateIntersectionSumServerMessage_ServerRoundOne* internal_default_instance() {
    return reinterpret_cast<const PrivateIntersectionSumServerMessage_ServerRoundOne*>(
               &_PrivateIntersectionSumServerMessage_ServerRoundOne_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PrivateIntersectionSumServerMessage_ServerRoundOne& a, PrivateIntersectionSumServerMessage_ServerRoundOne& b) {
    a.Swap(&b);
  }
  inline void Swap(PrivateIntersectionSumServerMessage_ServerRoundOne* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PrivateIntersectionSumServerMessage_ServerRoundOne* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PrivateIntersectionSumServerMessage_ServerRoundOne* New() const final {
    return CreateMaybeMessage<PrivateIntersectionSumServerMessage_ServerRoundOne>(nullptr);
  }

  PrivateIntersectionSumServerMessage_ServerRoundOne* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PrivateIntersectionSumServerMessage_ServerRoundOne>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PrivateIntersectionSumServerMessage_ServerRoundOne& from);
  void MergeFrom(const PrivateIntersectionSumServerMessage_ServerRoundOne& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrivateIntersectionSumServerMessage_ServerRoundOne* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "private_join_and_compute.PrivateIntersectionSumServerMessage.ServerRoundOne";
  }
  protected:
  explicit PrivateIntersectionSumServerMessage_ServerRoundOne(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_private_5fjoin_5fand_5fcompute_2fprivate_5fintersection_5fsum_2eproto);
    return ::descriptor_table_private_5fjoin_5fand_5fcompute_2fprivate_5fintersection_5fsum_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEncryptedSetFieldNumber = 1,
  };
  // optional .private_join_and_compute.EncryptedSet encrypted_set = 1;
  bool has_encrypted_set() const;
  private:
  bool _internal_has_encrypted_set() const;
  public:
  void clear_encrypted_set();
  const ::private_join_and_compute::EncryptedSet& encrypted_set() const;
  ::private_join_and_compute::EncryptedSet* release_encrypted_set();
  ::private_join_and_compute::EncryptedSet* mutable_encrypted_set();
  void set_allocated_encrypted_set(::private_join_and_compute::EncryptedSet* encrypted_set);
  private:
  const ::private_join_and_compute::EncryptedSet& _internal_encrypted_set() const;
  ::private_join_and_compute::EncryptedSet* _internal_mutable_encrypted_set();
  public:
  void unsafe_arena_set_allocated_encrypted_set(
      ::private_join_and_compute::EncryptedSet* encrypted_set);
  ::private_join_and_compute::EncryptedSet* unsafe_arena_release_encrypted_set();

  // @@protoc_insertion_point(class_scope:private_join_and_compute.PrivateIntersectionSumServerMessage.ServerRoundOne)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::private_join_and_compute::EncryptedSet* encrypted_set_;
  friend struct ::TableStruct_private_5fjoin_5fand_5fcompute_2fprivate_5fintersection_5fsum_2eproto;
};
// -------------------------------------------------------------------

class PrivateIntersectionSumServerMessage_ServerRoundTwo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:private_join_and_compute.PrivateIntersectionSumServerMessage.ServerRoundTwo) */ {
 public:
  inline PrivateIntersectionSumServerMessage_ServerRoundTwo() : PrivateIntersectionSumServerMessage_ServerRoundTwo(nullptr) {};
  virtual ~PrivateIntersectionSumServerMessage_ServerRoundTwo();

  PrivateIntersectionSumServerMessage_ServerRoundTwo(const PrivateIntersectionSumServerMessage_ServerRoundTwo& from);
  PrivateIntersectionSumServerMessage_ServerRoundTwo(PrivateIntersectionSumServerMessage_ServerRoundTwo&& from) noexcept
    : PrivateIntersectionSumServerMessage_ServerRoundTwo() {
    *this = ::std::move(from);
  }

  inline PrivateIntersectionSumServerMessage_ServerRoundTwo& operator=(const PrivateIntersectionSumServerMessage_ServerRoundTwo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrivateIntersectionSumServerMessage_ServerRoundTwo& operator=(PrivateIntersectionSumServerMessage_ServerRoundTwo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PrivateIntersectionSumServerMessage_ServerRoundTwo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PrivateIntersectionSumServerMessage_ServerRoundTwo* internal_default_instance() {
    return reinterpret_cast<const PrivateIntersectionSumServerMessage_ServerRoundTwo*>(
               &_PrivateIntersectionSumServerMessage_ServerRoundTwo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PrivateIntersectionSumServerMessage_ServerRoundTwo& a, PrivateIntersectionSumServerMessage_ServerRoundTwo& b) {
    a.Swap(&b);
  }
  inline void Swap(PrivateIntersectionSumServerMessage_ServerRoundTwo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PrivateIntersectionSumServerMessage_ServerRoundTwo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PrivateIntersectionSumServerMessage_ServerRoundTwo* New() const final {
    return CreateMaybeMessage<PrivateIntersectionSumServerMessage_ServerRoundTwo>(nullptr);
  }

  PrivateIntersectionSumServerMessage_ServerRoundTwo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PrivateIntersectionSumServerMessage_ServerRoundTwo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PrivateIntersectionSumServerMessage_ServerRoundTwo& from);
  void MergeFrom(const PrivateIntersectionSumServerMessage_ServerRoundTwo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrivateIntersectionSumServerMessage_ServerRoundTwo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "private_join_and_compute.PrivateIntersectionSumServerMessage.ServerRoundTwo";
  }
  protected:
  explicit PrivateIntersectionSumServerMessage_ServerRoundTwo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_private_5fjoin_5fand_5fcompute_2fprivate_5fintersection_5fsum_2eproto);
    return ::descriptor_table_private_5fjoin_5fand_5fcompute_2fprivate_5fintersection_5fsum_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kComputationProofFieldNumber = 2,
    kEncryptedSumFieldNumber = 3,
    kIntersectionSizeFieldNumber = 1,
  };
  // optional string computation_proof = 2;
  bool has_computation_proof() const;
  private:
  bool _internal_has_computation_proof() const;
  public:
  void clear_computation_proof();
  const std::string& computation_proof() const;
  void set_computation_proof(const std::string& value);
  void set_computation_proof(std::string&& value);
  void set_computation_proof(const char* value);
  void set_computation_proof(const char* value, size_t size);
  std::string* mutable_computation_proof();
  std::string* release_computation_proof();
  void set_allocated_computation_proof(std::string* computation_proof);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_computation_proof();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_computation_proof(
      std::string* computation_proof);
  private:
  const std::string& _internal_computation_proof() const;
  void _internal_set_computation_proof(const std::string& value);
  std::string* _internal_mutable_computation_proof();
  public:

  // optional bytes encrypted_sum = 3;
  bool has_encrypted_sum() const;
  private:
  bool _internal_has_encrypted_sum() const;
  public:
  void clear_encrypted_sum();
  const std::string& encrypted_sum() const;
  void set_encrypted_sum(const std::string& value);
  void set_encrypted_sum(std::string&& value);
  void set_encrypted_sum(const char* value);
  void set_encrypted_sum(const void* value, size_t size);
  std::string* mutable_encrypted_sum();
  std::string* release_encrypted_sum();
  void set_allocated_encrypted_sum(std::string* encrypted_sum);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_encrypted_sum();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_encrypted_sum(
      std::string* encrypted_sum);
  private:
  const std::string& _internal_encrypted_sum() const;
  void _internal_set_encrypted_sum(const std::string& value);
  std::string* _internal_mutable_encrypted_sum();
  public:

  // optional int64 intersection_size = 1;
  bool has_intersection_size() const;
  private:
  bool _internal_has_intersection_size() const;
  public:
  void clear_intersection_size();
  ::PROTOBUF_NAMESPACE_ID::int64 intersection_size() const;
  void set_intersection_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_intersection_size() const;
  void _internal_set_intersection_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:private_join_and_compute.PrivateIntersectionSumServerMessage.ServerRoundTwo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr computation_proof_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encrypted_sum_;
  ::PROTOBUF_NAMESPACE_ID::int64 intersection_size_;
  friend struct ::TableStruct_private_5fjoin_5fand_5fcompute_2fprivate_5fintersection_5fsum_2eproto;
};
// -------------------------------------------------------------------

class PrivateIntersectionSumServerMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:private_join_and_compute.PrivateIntersectionSumServerMessage) */ {
 public:
  inline PrivateIntersectionSumServerMessage() : PrivateIntersectionSumServerMessage(nullptr) {};
  virtual ~PrivateIntersectionSumServerMessage();

  PrivateIntersectionSumServerMessage(const PrivateIntersectionSumServerMessage& from);
  PrivateIntersectionSumServerMessage(PrivateIntersectionSumServerMessage&& from) noexcept
    : PrivateIntersectionSumServerMessage() {
    *this = ::std::move(from);
  }

  inline PrivateIntersectionSumServerMessage& operator=(const PrivateIntersectionSumServerMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrivateIntersectionSumServerMessage& operator=(PrivateIntersectionSumServerMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PrivateIntersectionSumServerMessage& default_instance();

  enum MessageContentCase {
    kServerRoundOne = 1,
    kServerRoundTwo = 2,
    MESSAGE_CONTENT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PrivateIntersectionSumServerMessage* internal_default_instance() {
    return reinterpret_cast<const PrivateIntersectionSumServerMessage*>(
               &_PrivateIntersectionSumServerMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PrivateIntersectionSumServerMessage& a, PrivateIntersectionSumServerMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(PrivateIntersectionSumServerMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PrivateIntersectionSumServerMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PrivateIntersectionSumServerMessage* New() const final {
    return CreateMaybeMessage<PrivateIntersectionSumServerMessage>(nullptr);
  }

  PrivateIntersectionSumServerMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PrivateIntersectionSumServerMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PrivateIntersectionSumServerMessage& from);
  void MergeFrom(const PrivateIntersectionSumServerMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrivateIntersectionSumServerMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "private_join_and_compute.PrivateIntersectionSumServerMessage";
  }
  protected:
  explicit PrivateIntersectionSumServerMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_private_5fjoin_5fand_5fcompute_2fprivate_5fintersection_5fsum_2eproto);
    return ::descriptor_table_private_5fjoin_5fand_5fcompute_2fprivate_5fintersection_5fsum_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef PrivateIntersectionSumServerMessage_ServerRoundOne ServerRoundOne;
  typedef PrivateIntersectionSumServerMessage_ServerRoundTwo ServerRoundTwo;

  // accessors -------------------------------------------------------

  enum : int {
    kServerRoundOneFieldNumber = 1,
    kServerRoundTwoFieldNumber = 2,
  };
  // .private_join_and_compute.PrivateIntersectionSumServerMessage.ServerRoundOne server_round_one = 1;
  bool has_server_round_one() const;
  private:
  bool _internal_has_server_round_one() const;
  public:
  void clear_server_round_one();
  const ::private_join_and_compute::PrivateIntersectionSumServerMessage_ServerRoundOne& server_round_one() const;
  ::private_join_and_compute::PrivateIntersectionSumServerMessage_ServerRoundOne* release_server_round_one();
  ::private_join_and_compute::PrivateIntersectionSumServerMessage_ServerRoundOne* mutable_server_round_one();
  void set_allocated_server_round_one(::private_join_and_compute::PrivateIntersectionSumServerMessage_ServerRoundOne* server_round_one);
  private:
  const ::private_join_and_compute::PrivateIntersectionSumServerMessage_ServerRoundOne& _internal_server_round_one() const;
  ::private_join_and_compute::PrivateIntersectionSumServerMessage_ServerRoundOne* _internal_mutable_server_round_one();
  public:
  void unsafe_arena_set_allocated_server_round_one(
      ::private_join_and_compute::PrivateIntersectionSumServerMessage_ServerRoundOne* server_round_one);
  ::private_join_and_compute::PrivateIntersectionSumServerMessage_ServerRoundOne* unsafe_arena_release_server_round_one();

  // .private_join_and_compute.PrivateIntersectionSumServerMessage.ServerRoundTwo server_round_two = 2;
  bool has_server_round_two() const;
  private:
  bool _internal_has_server_round_two() const;
  public:
  void clear_server_round_two();
  const ::private_join_and_compute::PrivateIntersectionSumServerMessage_ServerRoundTwo& server_round_two() const;
  ::private_join_and_compute::PrivateIntersectionSumServerMessage_ServerRoundTwo* release_server_round_two();
  ::private_join_and_compute::PrivateIntersectionSumServerMessage_ServerRoundTwo* mutable_server_round_two();
  void set_allocated_server_round_two(::private_join_and_compute::PrivateIntersectionSumServerMessage_ServerRoundTwo* server_round_two);
  private:
  const ::private_join_and_compute::PrivateIntersectionSumServerMessage_ServerRoundTwo& _internal_server_round_two() const;
  ::private_join_and_compute::PrivateIntersectionSumServerMessage_ServerRoundTwo* _internal_mutable_server_round_two();
  public:
  void unsafe_arena_set_allocated_server_round_two(
      ::private_join_and_compute::PrivateIntersectionSumServerMessage_ServerRoundTwo* server_round_two);
  ::private_join_and_compute::PrivateIntersectionSumServerMessage_ServerRoundTwo* unsafe_arena_release_server_round_two();

  void clear_message_content();
  MessageContentCase message_content_case() const;
  // @@protoc_insertion_point(class_scope:private_join_and_compute.PrivateIntersectionSumServerMessage)
 private:
  class _Internal;
  void set_has_server_round_one();
  void set_has_server_round_two();

  inline bool has_message_content() const;
  inline void clear_has_message_content();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union MessageContentUnion {
    MessageContentUnion() {}
    ::private_join_and_compute::PrivateIntersectionSumServerMessage_ServerRoundOne* server_round_one_;
    ::private_join_and_compute::PrivateIntersectionSumServerMessage_ServerRoundTwo* server_round_two_;
  } message_content_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_private_5fjoin_5fand_5fcompute_2fprivate_5fintersection_5fsum_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PrivateIntersectionSumClientMessage_StartProtocolRequest

// -------------------------------------------------------------------

// PrivateIntersectionSumClientMessage_ClientRoundOne

// optional bytes public_key = 1;
inline bool PrivateIntersectionSumClientMessage_ClientRoundOne::_internal_has_public_key() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PrivateIntersectionSumClientMessage_ClientRoundOne::has_public_key() const {
  return _internal_has_public_key();
}
inline void PrivateIntersectionSumClientMessage_ClientRoundOne::clear_public_key() {
  public_key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PrivateIntersectionSumClientMessage_ClientRoundOne::public_key() const {
  // @@protoc_insertion_point(field_get:private_join_and_compute.PrivateIntersectionSumClientMessage.ClientRoundOne.public_key)
  return _internal_public_key();
}
inline void PrivateIntersectionSumClientMessage_ClientRoundOne::set_public_key(const std::string& value) {
  _internal_set_public_key(value);
  // @@protoc_insertion_point(field_set:private_join_and_compute.PrivateIntersectionSumClientMessage.ClientRoundOne.public_key)
}
inline std::string* PrivateIntersectionSumClientMessage_ClientRoundOne::mutable_public_key() {
  // @@protoc_insertion_point(field_mutable:private_join_and_compute.PrivateIntersectionSumClientMessage.ClientRoundOne.public_key)
  return _internal_mutable_public_key();
}
inline const std::string& PrivateIntersectionSumClientMessage_ClientRoundOne::_internal_public_key() const {
  return public_key_.Get();
}
inline void PrivateIntersectionSumClientMessage_ClientRoundOne::_internal_set_public_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  public_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PrivateIntersectionSumClientMessage_ClientRoundOne::set_public_key(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  public_key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:private_join_and_compute.PrivateIntersectionSumClientMessage.ClientRoundOne.public_key)
}
inline void PrivateIntersectionSumClientMessage_ClientRoundOne::set_public_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  public_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:private_join_and_compute.PrivateIntersectionSumClientMessage.ClientRoundOne.public_key)
}
inline void PrivateIntersectionSumClientMessage_ClientRoundOne::set_public_key(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  public_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:private_join_and_compute.PrivateIntersectionSumClientMessage.ClientRoundOne.public_key)
}
inline std::string* PrivateIntersectionSumClientMessage_ClientRoundOne::_internal_mutable_public_key() {
  _has_bits_[0] |= 0x00000001u;
  return public_key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PrivateIntersectionSumClientMessage_ClientRoundOne::release_public_key() {
  // @@protoc_insertion_point(field_release:private_join_and_compute.PrivateIntersectionSumClientMessage.ClientRoundOne.public_key)
  if (!_internal_has_public_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return public_key_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PrivateIntersectionSumClientMessage_ClientRoundOne::set_allocated_public_key(std::string* public_key) {
  if (public_key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  public_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), public_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:private_join_and_compute.PrivateIntersectionSumClientMessage.ClientRoundOne.public_key)
}
inline std::string* PrivateIntersectionSumClientMessage_ClientRoundOne::unsafe_arena_release_public_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:private_join_and_compute.PrivateIntersectionSumClientMessage.ClientRoundOne.public_key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return public_key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PrivateIntersectionSumClientMessage_ClientRoundOne::unsafe_arena_set_allocated_public_key(
    std::string* public_key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (public_key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  public_key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      public_key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:private_join_and_compute.PrivateIntersectionSumClientMessage.ClientRoundOne.public_key)
}

// optional .private_join_and_compute.EncryptedSet encrypted_set = 2;
inline bool PrivateIntersectionSumClientMessage_ClientRoundOne::_internal_has_encrypted_set() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || encrypted_set_ != nullptr);
  return value;
}
inline bool PrivateIntersectionSumClientMessage_ClientRoundOne::has_encrypted_set() const {
  return _internal_has_encrypted_set();
}
inline const ::private_join_and_compute::EncryptedSet& PrivateIntersectionSumClientMessage_ClientRoundOne::_internal_encrypted_set() const {
  const ::private_join_and_compute::EncryptedSet* p = encrypted_set_;
  return p != nullptr ? *p : *reinterpret_cast<const ::private_join_and_compute::EncryptedSet*>(
      &::private_join_and_compute::_EncryptedSet_default_instance_);
}
inline const ::private_join_and_compute::EncryptedSet& PrivateIntersectionSumClientMessage_ClientRoundOne::encrypted_set() const {
  // @@protoc_insertion_point(field_get:private_join_and_compute.PrivateIntersectionSumClientMessage.ClientRoundOne.encrypted_set)
  return _internal_encrypted_set();
}
inline void PrivateIntersectionSumClientMessage_ClientRoundOne::unsafe_arena_set_allocated_encrypted_set(
    ::private_join_and_compute::EncryptedSet* encrypted_set) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(encrypted_set_);
  }
  encrypted_set_ = encrypted_set;
  if (encrypted_set) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:private_join_and_compute.PrivateIntersectionSumClientMessage.ClientRoundOne.encrypted_set)
}
inline ::private_join_and_compute::EncryptedSet* PrivateIntersectionSumClientMessage_ClientRoundOne::release_encrypted_set() {
  auto temp = unsafe_arena_release_encrypted_set();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::private_join_and_compute::EncryptedSet* PrivateIntersectionSumClientMessage_ClientRoundOne::unsafe_arena_release_encrypted_set() {
  // @@protoc_insertion_point(field_release:private_join_and_compute.PrivateIntersectionSumClientMessage.ClientRoundOne.encrypted_set)
  _has_bits_[0] &= ~0x00000002u;
  ::private_join_and_compute::EncryptedSet* temp = encrypted_set_;
  encrypted_set_ = nullptr;
  return temp;
}
inline ::private_join_and_compute::EncryptedSet* PrivateIntersectionSumClientMessage_ClientRoundOne::_internal_mutable_encrypted_set() {
  _has_bits_[0] |= 0x00000002u;
  if (encrypted_set_ == nullptr) {
    auto* p = CreateMaybeMessage<::private_join_and_compute::EncryptedSet>(GetArena());
    encrypted_set_ = p;
  }
  return encrypted_set_;
}
inline ::private_join_and_compute::EncryptedSet* PrivateIntersectionSumClientMessage_ClientRoundOne::mutable_encrypted_set() {
  // @@protoc_insertion_point(field_mutable:private_join_and_compute.PrivateIntersectionSumClientMessage.ClientRoundOne.encrypted_set)
  return _internal_mutable_encrypted_set();
}
inline void PrivateIntersectionSumClientMessage_ClientRoundOne::set_allocated_encrypted_set(::private_join_and_compute::EncryptedSet* encrypted_set) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(encrypted_set_);
  }
  if (encrypted_set) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(encrypted_set)->GetArena();
    if (message_arena != submessage_arena) {
      encrypted_set = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, encrypted_set, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  encrypted_set_ = encrypted_set;
  // @@protoc_insertion_point(field_set_allocated:private_join_and_compute.PrivateIntersectionSumClientMessage.ClientRoundOne.encrypted_set)
}

// optional .private_join_and_compute.EncryptedSet reencrypted_set = 3;
inline bool PrivateIntersectionSumClientMessage_ClientRoundOne::_internal_has_reencrypted_set() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || reencrypted_set_ != nullptr);
  return value;
}
inline bool PrivateIntersectionSumClientMessage_ClientRoundOne::has_reencrypted_set() const {
  return _internal_has_reencrypted_set();
}
inline const ::private_join_and_compute::EncryptedSet& PrivateIntersectionSumClientMessage_ClientRoundOne::_internal_reencrypted_set() const {
  const ::private_join_and_compute::EncryptedSet* p = reencrypted_set_;
  return p != nullptr ? *p : *reinterpret_cast<const ::private_join_and_compute::EncryptedSet*>(
      &::private_join_and_compute::_EncryptedSet_default_instance_);
}
inline const ::private_join_and_compute::EncryptedSet& PrivateIntersectionSumClientMessage_ClientRoundOne::reencrypted_set() const {
  // @@protoc_insertion_point(field_get:private_join_and_compute.PrivateIntersectionSumClientMessage.ClientRoundOne.reencrypted_set)
  return _internal_reencrypted_set();
}
inline void PrivateIntersectionSumClientMessage_ClientRoundOne::unsafe_arena_set_allocated_reencrypted_set(
    ::private_join_and_compute::EncryptedSet* reencrypted_set) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reencrypted_set_);
  }
  reencrypted_set_ = reencrypted_set;
  if (reencrypted_set) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:private_join_and_compute.PrivateIntersectionSumClientMessage.ClientRoundOne.reencrypted_set)
}
inline ::private_join_and_compute::EncryptedSet* PrivateIntersectionSumClientMessage_ClientRoundOne::release_reencrypted_set() {
  auto temp = unsafe_arena_release_reencrypted_set();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::private_join_and_compute::EncryptedSet* PrivateIntersectionSumClientMessage_ClientRoundOne::unsafe_arena_release_reencrypted_set() {
  // @@protoc_insertion_point(field_release:private_join_and_compute.PrivateIntersectionSumClientMessage.ClientRoundOne.reencrypted_set)
  _has_bits_[0] &= ~0x00000004u;
  ::private_join_and_compute::EncryptedSet* temp = reencrypted_set_;
  reencrypted_set_ = nullptr;
  return temp;
}
inline ::private_join_and_compute::EncryptedSet* PrivateIntersectionSumClientMessage_ClientRoundOne::_internal_mutable_reencrypted_set() {
  _has_bits_[0] |= 0x00000004u;
  if (reencrypted_set_ == nullptr) {
    auto* p = CreateMaybeMessage<::private_join_and_compute::EncryptedSet>(GetArena());
    reencrypted_set_ = p;
  }
  return reencrypted_set_;
}
inline ::private_join_and_compute::EncryptedSet* PrivateIntersectionSumClientMessage_ClientRoundOne::mutable_reencrypted_set() {
  // @@protoc_insertion_point(field_mutable:private_join_and_compute.PrivateIntersectionSumClientMessage.ClientRoundOne.reencrypted_set)
  return _internal_mutable_reencrypted_set();
}
inline void PrivateIntersectionSumClientMessage_ClientRoundOne::set_allocated_reencrypted_set(::private_join_and_compute::EncryptedSet* reencrypted_set) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(reencrypted_set_);
  }
  if (reencrypted_set) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reencrypted_set)->GetArena();
    if (message_arena != submessage_arena) {
      reencrypted_set = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reencrypted_set, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  reencrypted_set_ = reencrypted_set;
  // @@protoc_insertion_point(field_set_allocated:private_join_and_compute.PrivateIntersectionSumClientMessage.ClientRoundOne.reencrypted_set)
}

// -------------------------------------------------------------------

// PrivateIntersectionSumClientMessage

// .private_join_and_compute.PrivateIntersectionSumClientMessage.StartProtocolRequest start_protocol_request = 1;
inline bool PrivateIntersectionSumClientMessage::_internal_has_start_protocol_request() const {
  return message_content_case() == kStartProtocolRequest;
}
inline bool PrivateIntersectionSumClientMessage::has_start_protocol_request() const {
  return _internal_has_start_protocol_request();
}
inline void PrivateIntersectionSumClientMessage::set_has_start_protocol_request() {
  _oneof_case_[0] = kStartProtocolRequest;
}
inline void PrivateIntersectionSumClientMessage::clear_start_protocol_request() {
  if (_internal_has_start_protocol_request()) {
    if (GetArena() == nullptr) {
      delete message_content_.start_protocol_request_;
    }
    clear_has_message_content();
  }
}
inline ::private_join_and_compute::PrivateIntersectionSumClientMessage_StartProtocolRequest* PrivateIntersectionSumClientMessage::release_start_protocol_request() {
  // @@protoc_insertion_point(field_release:private_join_and_compute.PrivateIntersectionSumClientMessage.start_protocol_request)
  if (_internal_has_start_protocol_request()) {
    clear_has_message_content();
      ::private_join_and_compute::PrivateIntersectionSumClientMessage_StartProtocolRequest* temp = message_content_.start_protocol_request_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_content_.start_protocol_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::private_join_and_compute::PrivateIntersectionSumClientMessage_StartProtocolRequest& PrivateIntersectionSumClientMessage::_internal_start_protocol_request() const {
  return _internal_has_start_protocol_request()
      ? *message_content_.start_protocol_request_
      : *reinterpret_cast< ::private_join_and_compute::PrivateIntersectionSumClientMessage_StartProtocolRequest*>(&::private_join_and_compute::_PrivateIntersectionSumClientMessage_StartProtocolRequest_default_instance_);
}
inline const ::private_join_and_compute::PrivateIntersectionSumClientMessage_StartProtocolRequest& PrivateIntersectionSumClientMessage::start_protocol_request() const {
  // @@protoc_insertion_point(field_get:private_join_and_compute.PrivateIntersectionSumClientMessage.start_protocol_request)
  return _internal_start_protocol_request();
}
inline ::private_join_and_compute::PrivateIntersectionSumClientMessage_StartProtocolRequest* PrivateIntersectionSumClientMessage::unsafe_arena_release_start_protocol_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:private_join_and_compute.PrivateIntersectionSumClientMessage.start_protocol_request)
  if (_internal_has_start_protocol_request()) {
    clear_has_message_content();
    ::private_join_and_compute::PrivateIntersectionSumClientMessage_StartProtocolRequest* temp = message_content_.start_protocol_request_;
    message_content_.start_protocol_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PrivateIntersectionSumClientMessage::unsafe_arena_set_allocated_start_protocol_request(::private_join_and_compute::PrivateIntersectionSumClientMessage_StartProtocolRequest* start_protocol_request) {
  clear_message_content();
  if (start_protocol_request) {
    set_has_start_protocol_request();
    message_content_.start_protocol_request_ = start_protocol_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:private_join_and_compute.PrivateIntersectionSumClientMessage.start_protocol_request)
}
inline ::private_join_and_compute::PrivateIntersectionSumClientMessage_StartProtocolRequest* PrivateIntersectionSumClientMessage::_internal_mutable_start_protocol_request() {
  if (!_internal_has_start_protocol_request()) {
    clear_message_content();
    set_has_start_protocol_request();
    message_content_.start_protocol_request_ = CreateMaybeMessage< ::private_join_and_compute::PrivateIntersectionSumClientMessage_StartProtocolRequest >(GetArena());
  }
  return message_content_.start_protocol_request_;
}
inline ::private_join_and_compute::PrivateIntersectionSumClientMessage_StartProtocolRequest* PrivateIntersectionSumClientMessage::mutable_start_protocol_request() {
  // @@protoc_insertion_point(field_mutable:private_join_and_compute.PrivateIntersectionSumClientMessage.start_protocol_request)
  return _internal_mutable_start_protocol_request();
}

// .private_join_and_compute.PrivateIntersectionSumClientMessage.ClientRoundOne client_round_one = 2;
inline bool PrivateIntersectionSumClientMessage::_internal_has_client_round_one() const {
  return message_content_case() == kClientRoundOne;
}
inline bool PrivateIntersectionSumClientMessage::has_client_round_one() const {
  return _internal_has_client_round_one();
}
inline void PrivateIntersectionSumClientMessage::set_has_client_round_one() {
  _oneof_case_[0] = kClientRoundOne;
}
inline void PrivateIntersectionSumClientMessage::clear_client_round_one() {
  if (_internal_has_client_round_one()) {
    if (GetArena() == nullptr) {
      delete message_content_.client_round_one_;
    }
    clear_has_message_content();
  }
}
inline ::private_join_and_compute::PrivateIntersectionSumClientMessage_ClientRoundOne* PrivateIntersectionSumClientMessage::release_client_round_one() {
  // @@protoc_insertion_point(field_release:private_join_and_compute.PrivateIntersectionSumClientMessage.client_round_one)
  if (_internal_has_client_round_one()) {
    clear_has_message_content();
      ::private_join_and_compute::PrivateIntersectionSumClientMessage_ClientRoundOne* temp = message_content_.client_round_one_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_content_.client_round_one_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::private_join_and_compute::PrivateIntersectionSumClientMessage_ClientRoundOne& PrivateIntersectionSumClientMessage::_internal_client_round_one() const {
  return _internal_has_client_round_one()
      ? *message_content_.client_round_one_
      : *reinterpret_cast< ::private_join_and_compute::PrivateIntersectionSumClientMessage_ClientRoundOne*>(&::private_join_and_compute::_PrivateIntersectionSumClientMessage_ClientRoundOne_default_instance_);
}
inline const ::private_join_and_compute::PrivateIntersectionSumClientMessage_ClientRoundOne& PrivateIntersectionSumClientMessage::client_round_one() const {
  // @@protoc_insertion_point(field_get:private_join_and_compute.PrivateIntersectionSumClientMessage.client_round_one)
  return _internal_client_round_one();
}
inline ::private_join_and_compute::PrivateIntersectionSumClientMessage_ClientRoundOne* PrivateIntersectionSumClientMessage::unsafe_arena_release_client_round_one() {
  // @@protoc_insertion_point(field_unsafe_arena_release:private_join_and_compute.PrivateIntersectionSumClientMessage.client_round_one)
  if (_internal_has_client_round_one()) {
    clear_has_message_content();
    ::private_join_and_compute::PrivateIntersectionSumClientMessage_ClientRoundOne* temp = message_content_.client_round_one_;
    message_content_.client_round_one_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PrivateIntersectionSumClientMessage::unsafe_arena_set_allocated_client_round_one(::private_join_and_compute::PrivateIntersectionSumClientMessage_ClientRoundOne* client_round_one) {
  clear_message_content();
  if (client_round_one) {
    set_has_client_round_one();
    message_content_.client_round_one_ = client_round_one;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:private_join_and_compute.PrivateIntersectionSumClientMessage.client_round_one)
}
inline ::private_join_and_compute::PrivateIntersectionSumClientMessage_ClientRoundOne* PrivateIntersectionSumClientMessage::_internal_mutable_client_round_one() {
  if (!_internal_has_client_round_one()) {
    clear_message_content();
    set_has_client_round_one();
    message_content_.client_round_one_ = CreateMaybeMessage< ::private_join_and_compute::PrivateIntersectionSumClientMessage_ClientRoundOne >(GetArena());
  }
  return message_content_.client_round_one_;
}
inline ::private_join_and_compute::PrivateIntersectionSumClientMessage_ClientRoundOne* PrivateIntersectionSumClientMessage::mutable_client_round_one() {
  // @@protoc_insertion_point(field_mutable:private_join_and_compute.PrivateIntersectionSumClientMessage.client_round_one)
  return _internal_mutable_client_round_one();
}

inline bool PrivateIntersectionSumClientMessage::has_message_content() const {
  return message_content_case() != MESSAGE_CONTENT_NOT_SET;
}
inline void PrivateIntersectionSumClientMessage::clear_has_message_content() {
  _oneof_case_[0] = MESSAGE_CONTENT_NOT_SET;
}
inline PrivateIntersectionSumClientMessage::MessageContentCase PrivateIntersectionSumClientMessage::message_content_case() const {
  return PrivateIntersectionSumClientMessage::MessageContentCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// PrivateIntersectionSumServerMessage_ServerRoundOne

// optional .private_join_and_compute.EncryptedSet encrypted_set = 1;
inline bool PrivateIntersectionSumServerMessage_ServerRoundOne::_internal_has_encrypted_set() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || encrypted_set_ != nullptr);
  return value;
}
inline bool PrivateIntersectionSumServerMessage_ServerRoundOne::has_encrypted_set() const {
  return _internal_has_encrypted_set();
}
inline const ::private_join_and_compute::EncryptedSet& PrivateIntersectionSumServerMessage_ServerRoundOne::_internal_encrypted_set() const {
  const ::private_join_and_compute::EncryptedSet* p = encrypted_set_;
  return p != nullptr ? *p : *reinterpret_cast<const ::private_join_and_compute::EncryptedSet*>(
      &::private_join_and_compute::_EncryptedSet_default_instance_);
}
inline const ::private_join_and_compute::EncryptedSet& PrivateIntersectionSumServerMessage_ServerRoundOne::encrypted_set() const {
  // @@protoc_insertion_point(field_get:private_join_and_compute.PrivateIntersectionSumServerMessage.ServerRoundOne.encrypted_set)
  return _internal_encrypted_set();
}
inline void PrivateIntersectionSumServerMessage_ServerRoundOne::unsafe_arena_set_allocated_encrypted_set(
    ::private_join_and_compute::EncryptedSet* encrypted_set) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(encrypted_set_);
  }
  encrypted_set_ = encrypted_set;
  if (encrypted_set) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:private_join_and_compute.PrivateIntersectionSumServerMessage.ServerRoundOne.encrypted_set)
}
inline ::private_join_and_compute::EncryptedSet* PrivateIntersectionSumServerMessage_ServerRoundOne::release_encrypted_set() {
  auto temp = unsafe_arena_release_encrypted_set();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::private_join_and_compute::EncryptedSet* PrivateIntersectionSumServerMessage_ServerRoundOne::unsafe_arena_release_encrypted_set() {
  // @@protoc_insertion_point(field_release:private_join_and_compute.PrivateIntersectionSumServerMessage.ServerRoundOne.encrypted_set)
  _has_bits_[0] &= ~0x00000001u;
  ::private_join_and_compute::EncryptedSet* temp = encrypted_set_;
  encrypted_set_ = nullptr;
  return temp;
}
inline ::private_join_and_compute::EncryptedSet* PrivateIntersectionSumServerMessage_ServerRoundOne::_internal_mutable_encrypted_set() {
  _has_bits_[0] |= 0x00000001u;
  if (encrypted_set_ == nullptr) {
    auto* p = CreateMaybeMessage<::private_join_and_compute::EncryptedSet>(GetArena());
    encrypted_set_ = p;
  }
  return encrypted_set_;
}
inline ::private_join_and_compute::EncryptedSet* PrivateIntersectionSumServerMessage_ServerRoundOne::mutable_encrypted_set() {
  // @@protoc_insertion_point(field_mutable:private_join_and_compute.PrivateIntersectionSumServerMessage.ServerRoundOne.encrypted_set)
  return _internal_mutable_encrypted_set();
}
inline void PrivateIntersectionSumServerMessage_ServerRoundOne::set_allocated_encrypted_set(::private_join_and_compute::EncryptedSet* encrypted_set) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(encrypted_set_);
  }
  if (encrypted_set) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(encrypted_set)->GetArena();
    if (message_arena != submessage_arena) {
      encrypted_set = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, encrypted_set, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  encrypted_set_ = encrypted_set;
  // @@protoc_insertion_point(field_set_allocated:private_join_and_compute.PrivateIntersectionSumServerMessage.ServerRoundOne.encrypted_set)
}

// -------------------------------------------------------------------

// PrivateIntersectionSumServerMessage_ServerRoundTwo

// optional int64 intersection_size = 1;
inline bool PrivateIntersectionSumServerMessage_ServerRoundTwo::_internal_has_intersection_size() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PrivateIntersectionSumServerMessage_ServerRoundTwo::has_intersection_size() const {
  return _internal_has_intersection_size();
}
inline void PrivateIntersectionSumServerMessage_ServerRoundTwo::clear_intersection_size() {
  intersection_size_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PrivateIntersectionSumServerMessage_ServerRoundTwo::_internal_intersection_size() const {
  return intersection_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PrivateIntersectionSumServerMessage_ServerRoundTwo::intersection_size() const {
  // @@protoc_insertion_point(field_get:private_join_and_compute.PrivateIntersectionSumServerMessage.ServerRoundTwo.intersection_size)
  return _internal_intersection_size();
}
inline void PrivateIntersectionSumServerMessage_ServerRoundTwo::_internal_set_intersection_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  intersection_size_ = value;
}
inline void PrivateIntersectionSumServerMessage_ServerRoundTwo::set_intersection_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_intersection_size(value);
  // @@protoc_insertion_point(field_set:private_join_and_compute.PrivateIntersectionSumServerMessage.ServerRoundTwo.intersection_size)
}

// optional string computation_proof = 2;
inline bool PrivateIntersectionSumServerMessage_ServerRoundTwo::_internal_has_computation_proof() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PrivateIntersectionSumServerMessage_ServerRoundTwo::has_computation_proof() const {
  return _internal_has_computation_proof();
}
inline void PrivateIntersectionSumServerMessage_ServerRoundTwo::clear_computation_proof() {
  computation_proof_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PrivateIntersectionSumServerMessage_ServerRoundTwo::computation_proof() const {
  // @@protoc_insertion_point(field_get:private_join_and_compute.PrivateIntersectionSumServerMessage.ServerRoundTwo.computation_proof)
  return _internal_computation_proof();
}
inline void PrivateIntersectionSumServerMessage_ServerRoundTwo::set_computation_proof(const std::string& value) {
  _internal_set_computation_proof(value);
  // @@protoc_insertion_point(field_set:private_join_and_compute.PrivateIntersectionSumServerMessage.ServerRoundTwo.computation_proof)
}
inline std::string* PrivateIntersectionSumServerMessage_ServerRoundTwo::mutable_computation_proof() {
  // @@protoc_insertion_point(field_mutable:private_join_and_compute.PrivateIntersectionSumServerMessage.ServerRoundTwo.computation_proof)
  return _internal_mutable_computation_proof();
}
inline const std::string& PrivateIntersectionSumServerMessage_ServerRoundTwo::_internal_computation_proof() const {
  return computation_proof_.Get();
}
inline void PrivateIntersectionSumServerMessage_ServerRoundTwo::_internal_set_computation_proof(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  computation_proof_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PrivateIntersectionSumServerMessage_ServerRoundTwo::set_computation_proof(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  computation_proof_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:private_join_and_compute.PrivateIntersectionSumServerMessage.ServerRoundTwo.computation_proof)
}
inline void PrivateIntersectionSumServerMessage_ServerRoundTwo::set_computation_proof(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  computation_proof_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:private_join_and_compute.PrivateIntersectionSumServerMessage.ServerRoundTwo.computation_proof)
}
inline void PrivateIntersectionSumServerMessage_ServerRoundTwo::set_computation_proof(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  computation_proof_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:private_join_and_compute.PrivateIntersectionSumServerMessage.ServerRoundTwo.computation_proof)
}
inline std::string* PrivateIntersectionSumServerMessage_ServerRoundTwo::_internal_mutable_computation_proof() {
  _has_bits_[0] |= 0x00000001u;
  return computation_proof_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PrivateIntersectionSumServerMessage_ServerRoundTwo::release_computation_proof() {
  // @@protoc_insertion_point(field_release:private_join_and_compute.PrivateIntersectionSumServerMessage.ServerRoundTwo.computation_proof)
  if (!_internal_has_computation_proof()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return computation_proof_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PrivateIntersectionSumServerMessage_ServerRoundTwo::set_allocated_computation_proof(std::string* computation_proof) {
  if (computation_proof != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  computation_proof_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), computation_proof,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:private_join_and_compute.PrivateIntersectionSumServerMessage.ServerRoundTwo.computation_proof)
}
inline std::string* PrivateIntersectionSumServerMessage_ServerRoundTwo::unsafe_arena_release_computation_proof() {
  // @@protoc_insertion_point(field_unsafe_arena_release:private_join_and_compute.PrivateIntersectionSumServerMessage.ServerRoundTwo.computation_proof)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return computation_proof_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PrivateIntersectionSumServerMessage_ServerRoundTwo::unsafe_arena_set_allocated_computation_proof(
    std::string* computation_proof) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (computation_proof != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  computation_proof_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      computation_proof, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:private_join_and_compute.PrivateIntersectionSumServerMessage.ServerRoundTwo.computation_proof)
}

// optional bytes encrypted_sum = 3;
inline bool PrivateIntersectionSumServerMessage_ServerRoundTwo::_internal_has_encrypted_sum() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PrivateIntersectionSumServerMessage_ServerRoundTwo::has_encrypted_sum() const {
  return _internal_has_encrypted_sum();
}
inline void PrivateIntersectionSumServerMessage_ServerRoundTwo::clear_encrypted_sum() {
  encrypted_sum_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PrivateIntersectionSumServerMessage_ServerRoundTwo::encrypted_sum() const {
  // @@protoc_insertion_point(field_get:private_join_and_compute.PrivateIntersectionSumServerMessage.ServerRoundTwo.encrypted_sum)
  return _internal_encrypted_sum();
}
inline void PrivateIntersectionSumServerMessage_ServerRoundTwo::set_encrypted_sum(const std::string& value) {
  _internal_set_encrypted_sum(value);
  // @@protoc_insertion_point(field_set:private_join_and_compute.PrivateIntersectionSumServerMessage.ServerRoundTwo.encrypted_sum)
}
inline std::string* PrivateIntersectionSumServerMessage_ServerRoundTwo::mutable_encrypted_sum() {
  // @@protoc_insertion_point(field_mutable:private_join_and_compute.PrivateIntersectionSumServerMessage.ServerRoundTwo.encrypted_sum)
  return _internal_mutable_encrypted_sum();
}
inline const std::string& PrivateIntersectionSumServerMessage_ServerRoundTwo::_internal_encrypted_sum() const {
  return encrypted_sum_.Get();
}
inline void PrivateIntersectionSumServerMessage_ServerRoundTwo::_internal_set_encrypted_sum(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  encrypted_sum_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PrivateIntersectionSumServerMessage_ServerRoundTwo::set_encrypted_sum(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  encrypted_sum_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:private_join_and_compute.PrivateIntersectionSumServerMessage.ServerRoundTwo.encrypted_sum)
}
inline void PrivateIntersectionSumServerMessage_ServerRoundTwo::set_encrypted_sum(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  encrypted_sum_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:private_join_and_compute.PrivateIntersectionSumServerMessage.ServerRoundTwo.encrypted_sum)
}
inline void PrivateIntersectionSumServerMessage_ServerRoundTwo::set_encrypted_sum(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  encrypted_sum_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:private_join_and_compute.PrivateIntersectionSumServerMessage.ServerRoundTwo.encrypted_sum)
}
inline std::string* PrivateIntersectionSumServerMessage_ServerRoundTwo::_internal_mutable_encrypted_sum() {
  _has_bits_[0] |= 0x00000002u;
  return encrypted_sum_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PrivateIntersectionSumServerMessage_ServerRoundTwo::release_encrypted_sum() {
  // @@protoc_insertion_point(field_release:private_join_and_compute.PrivateIntersectionSumServerMessage.ServerRoundTwo.encrypted_sum)
  if (!_internal_has_encrypted_sum()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return encrypted_sum_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PrivateIntersectionSumServerMessage_ServerRoundTwo::set_allocated_encrypted_sum(std::string* encrypted_sum) {
  if (encrypted_sum != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  encrypted_sum_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), encrypted_sum,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:private_join_and_compute.PrivateIntersectionSumServerMessage.ServerRoundTwo.encrypted_sum)
}
inline std::string* PrivateIntersectionSumServerMessage_ServerRoundTwo::unsafe_arena_release_encrypted_sum() {
  // @@protoc_insertion_point(field_unsafe_arena_release:private_join_and_compute.PrivateIntersectionSumServerMessage.ServerRoundTwo.encrypted_sum)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return encrypted_sum_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PrivateIntersectionSumServerMessage_ServerRoundTwo::unsafe_arena_set_allocated_encrypted_sum(
    std::string* encrypted_sum) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (encrypted_sum != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  encrypted_sum_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      encrypted_sum, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:private_join_and_compute.PrivateIntersectionSumServerMessage.ServerRoundTwo.encrypted_sum)
}

// -------------------------------------------------------------------

// PrivateIntersectionSumServerMessage

// .private_join_and_compute.PrivateIntersectionSumServerMessage.ServerRoundOne server_round_one = 1;
inline bool PrivateIntersectionSumServerMessage::_internal_has_server_round_one() const {
  return message_content_case() == kServerRoundOne;
}
inline bool PrivateIntersectionSumServerMessage::has_server_round_one() const {
  return _internal_has_server_round_one();
}
inline void PrivateIntersectionSumServerMessage::set_has_server_round_one() {
  _oneof_case_[0] = kServerRoundOne;
}
inline void PrivateIntersectionSumServerMessage::clear_server_round_one() {
  if (_internal_has_server_round_one()) {
    if (GetArena() == nullptr) {
      delete message_content_.server_round_one_;
    }
    clear_has_message_content();
  }
}
inline ::private_join_and_compute::PrivateIntersectionSumServerMessage_ServerRoundOne* PrivateIntersectionSumServerMessage::release_server_round_one() {
  // @@protoc_insertion_point(field_release:private_join_and_compute.PrivateIntersectionSumServerMessage.server_round_one)
  if (_internal_has_server_round_one()) {
    clear_has_message_content();
      ::private_join_and_compute::PrivateIntersectionSumServerMessage_ServerRoundOne* temp = message_content_.server_round_one_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_content_.server_round_one_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::private_join_and_compute::PrivateIntersectionSumServerMessage_ServerRoundOne& PrivateIntersectionSumServerMessage::_internal_server_round_one() const {
  return _internal_has_server_round_one()
      ? *message_content_.server_round_one_
      : *reinterpret_cast< ::private_join_and_compute::PrivateIntersectionSumServerMessage_ServerRoundOne*>(&::private_join_and_compute::_PrivateIntersectionSumServerMessage_ServerRoundOne_default_instance_);
}
inline const ::private_join_and_compute::PrivateIntersectionSumServerMessage_ServerRoundOne& PrivateIntersectionSumServerMessage::server_round_one() const {
  // @@protoc_insertion_point(field_get:private_join_and_compute.PrivateIntersectionSumServerMessage.server_round_one)
  return _internal_server_round_one();
}
inline ::private_join_and_compute::PrivateIntersectionSumServerMessage_ServerRoundOne* PrivateIntersectionSumServerMessage::unsafe_arena_release_server_round_one() {
  // @@protoc_insertion_point(field_unsafe_arena_release:private_join_and_compute.PrivateIntersectionSumServerMessage.server_round_one)
  if (_internal_has_server_round_one()) {
    clear_has_message_content();
    ::private_join_and_compute::PrivateIntersectionSumServerMessage_ServerRoundOne* temp = message_content_.server_round_one_;
    message_content_.server_round_one_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PrivateIntersectionSumServerMessage::unsafe_arena_set_allocated_server_round_one(::private_join_and_compute::PrivateIntersectionSumServerMessage_ServerRoundOne* server_round_one) {
  clear_message_content();
  if (server_round_one) {
    set_has_server_round_one();
    message_content_.server_round_one_ = server_round_one;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:private_join_and_compute.PrivateIntersectionSumServerMessage.server_round_one)
}
inline ::private_join_and_compute::PrivateIntersectionSumServerMessage_ServerRoundOne* PrivateIntersectionSumServerMessage::_internal_mutable_server_round_one() {
  if (!_internal_has_server_round_one()) {
    clear_message_content();
    set_has_server_round_one();
    message_content_.server_round_one_ = CreateMaybeMessage< ::private_join_and_compute::PrivateIntersectionSumServerMessage_ServerRoundOne >(GetArena());
  }
  return message_content_.server_round_one_;
}
inline ::private_join_and_compute::PrivateIntersectionSumServerMessage_ServerRoundOne* PrivateIntersectionSumServerMessage::mutable_server_round_one() {
  // @@protoc_insertion_point(field_mutable:private_join_and_compute.PrivateIntersectionSumServerMessage.server_round_one)
  return _internal_mutable_server_round_one();
}

// .private_join_and_compute.PrivateIntersectionSumServerMessage.ServerRoundTwo server_round_two = 2;
inline bool PrivateIntersectionSumServerMessage::_internal_has_server_round_two() const {
  return message_content_case() == kServerRoundTwo;
}
inline bool PrivateIntersectionSumServerMessage::has_server_round_two() const {
  return _internal_has_server_round_two();
}
inline void PrivateIntersectionSumServerMessage::set_has_server_round_two() {
  _oneof_case_[0] = kServerRoundTwo;
}
inline void PrivateIntersectionSumServerMessage::clear_server_round_two() {
  if (_internal_has_server_round_two()) {
    if (GetArena() == nullptr) {
      delete message_content_.server_round_two_;
    }
    clear_has_message_content();
  }
}
inline ::private_join_and_compute::PrivateIntersectionSumServerMessage_ServerRoundTwo* PrivateIntersectionSumServerMessage::release_server_round_two() {
  // @@protoc_insertion_point(field_release:private_join_and_compute.PrivateIntersectionSumServerMessage.server_round_two)
  if (_internal_has_server_round_two()) {
    clear_has_message_content();
      ::private_join_and_compute::PrivateIntersectionSumServerMessage_ServerRoundTwo* temp = message_content_.server_round_two_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_content_.server_round_two_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::private_join_and_compute::PrivateIntersectionSumServerMessage_ServerRoundTwo& PrivateIntersectionSumServerMessage::_internal_server_round_two() const {
  return _internal_has_server_round_two()
      ? *message_content_.server_round_two_
      : *reinterpret_cast< ::private_join_and_compute::PrivateIntersectionSumServerMessage_ServerRoundTwo*>(&::private_join_and_compute::_PrivateIntersectionSumServerMessage_ServerRoundTwo_default_instance_);
}
inline const ::private_join_and_compute::PrivateIntersectionSumServerMessage_ServerRoundTwo& PrivateIntersectionSumServerMessage::server_round_two() const {
  // @@protoc_insertion_point(field_get:private_join_and_compute.PrivateIntersectionSumServerMessage.server_round_two)
  return _internal_server_round_two();
}
inline ::private_join_and_compute::PrivateIntersectionSumServerMessage_ServerRoundTwo* PrivateIntersectionSumServerMessage::unsafe_arena_release_server_round_two() {
  // @@protoc_insertion_point(field_unsafe_arena_release:private_join_and_compute.PrivateIntersectionSumServerMessage.server_round_two)
  if (_internal_has_server_round_two()) {
    clear_has_message_content();
    ::private_join_and_compute::PrivateIntersectionSumServerMessage_ServerRoundTwo* temp = message_content_.server_round_two_;
    message_content_.server_round_two_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PrivateIntersectionSumServerMessage::unsafe_arena_set_allocated_server_round_two(::private_join_and_compute::PrivateIntersectionSumServerMessage_ServerRoundTwo* server_round_two) {
  clear_message_content();
  if (server_round_two) {
    set_has_server_round_two();
    message_content_.server_round_two_ = server_round_two;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:private_join_and_compute.PrivateIntersectionSumServerMessage.server_round_two)
}
inline ::private_join_and_compute::PrivateIntersectionSumServerMessage_ServerRoundTwo* PrivateIntersectionSumServerMessage::_internal_mutable_server_round_two() {
  if (!_internal_has_server_round_two()) {
    clear_message_content();
    set_has_server_round_two();
    message_content_.server_round_two_ = CreateMaybeMessage< ::private_join_and_compute::PrivateIntersectionSumServerMessage_ServerRoundTwo >(GetArena());
  }
  return message_content_.server_round_two_;
}
inline ::private_join_and_compute::PrivateIntersectionSumServerMessage_ServerRoundTwo* PrivateIntersectionSumServerMessage::mutable_server_round_two() {
  // @@protoc_insertion_point(field_mutable:private_join_and_compute.PrivateIntersectionSumServerMessage.server_round_two)
  return _internal_mutable_server_round_two();
}

inline bool PrivateIntersectionSumServerMessage::has_message_content() const {
  return message_content_case() != MESSAGE_CONTENT_NOT_SET;
}
inline void PrivateIntersectionSumServerMessage::clear_has_message_content() {
  _oneof_case_[0] = MESSAGE_CONTENT_NOT_SET;
}
inline PrivateIntersectionSumServerMessage::MessageContentCase PrivateIntersectionSumServerMessage::message_content_case() const {
  return PrivateIntersectionSumServerMessage::MessageContentCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace private_join_and_compute

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_private_5fjoin_5fand_5fcompute_2fprivate_5fintersection_5fsum_2eproto
